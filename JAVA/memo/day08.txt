this()
    자기자신의 생성자를 의미한다.
    생성자 내부에서만 사용이 가능하며 최상단에 작성해야한다.

======================================================================================================================================================

static(정적인)
    멤버 변수의 종류
        static이 붙은 변수: static변수, 클래스 변스, 정적변수
        static이 안붙은 변수: 인스턴스 변수
    
    멤버 메소드의 종류
        static이 붙은 메소드: static 메소드, 클래스 메소드, 정적 메소드
        static이 안붙은 메소드: 인스턴스 메소드
    
    1. static변수, static메소드는 객체를 생성하지 않아도 사용할 수 있다.
    2. static변수는 객체와 상관 없이 하나의 저장공간이므로 모든 객체가 공유해서 사용한다
    3. static메소드가 메모리에 사용준비가 끝나도 인스턴스변수는 new를 사용하여 객체를 생성하기전까지는 
       사용할 수 없기 때문이다.
    4. 클래스명.멤버명으로 사용한다.

======================================================================================================================================================

상속(inheritance)
    1. 기존에 선언된 클래스의 멤버(생성자는 제외)를 새롭게 만들 클래스에서 사용하고 싶을때
       상속을 받고 새로운 기능만 추가한다
    2. 여러 클래스 선언시 멤버가 겹치는 경우, 부모클래스를 먼저 선언하고 공통멤버를 자식클래스에게 상속해준다.

    상속 문법

        class Parent{
            Parents 멤버
        }

        class Child extends Parents{
            Parents, Child 멤버
        }

    super: 부모의 참조값

    super(): 부모 생성자
             자식 클래스 타입의 객체로 부모필드에 접근할 수 있다.
             우리는 객체를 만들때 자식 생성자만 호출하기 때문에 자식 생성자 호출시 부모와 생성자도 호출되며
             이는 자식의 필드를 초기화 할때 초기화 하는 것을 의미한다
             즉, 자식객체를 생성하게 되면 부모 객체도 생성하게 된다(부모 먼저 생성)
             부모 생성자를 호출하는 방법은 super()를 사용하면 된다.
             만약에 super()를 작성하지 않더라도 컴파일러가 자동으로 작성해 준다