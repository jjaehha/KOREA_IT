객체지향 프로그래밍(Object Oriented Programming) OOP
    추상화된 클래스로 객체를 만들고 객체들간 관계를 맺어 상호작용하는 프로그래밍 기법

추상화란?(객체모델링)
    공통적인 특징을 파악하여 하나의 묶음으로 만들어내는 것

클래스
    1. 사용자정의 타입
        - 클래스를 사용하면 여러 타입, 여러 값을 저장할 수 있는 저장공간을 만들 수 있다.
        - 클래스 안에 선언된 변수와 메소드를 사용하고 싶다면, 해당 클래스 타입으로 변수를 선언해야 한다.

    2. 연관성이 있는 저장공간과 기능을 한곳에 모아 평하게 관리할 수 있는것
        - 저장공간과 기능을 나누어 관리하게 되면 코드가 길어졌을때 사용하기 불편하다.
            이때 연관되는 저장공간과 기능을 클래스로 묶어서 관리할 수 있다

    3. 객체를 생성하기 위한 틀, 설계도
        - 공통되는 속성(변수)과 행위(메소드)를 한번만 선언해 놓고 가져다 사용만 하도록 설계한다.
        - 주상적인 것(클래스)을 구체와(메모리에 생서된 것)시키면 객체라고 한다.

=====================================================================================================================================================

객체(Object)와 인스턴스(instance)
    일반적으로 객체와 인스턴스는 동일하다고 생각하고 사용해도 큰 문제는 없다

클래스 선언
    class 클래스명 {
        멤버 변수; // 필드 전역변수
        멤버 메소드 () {}
        // class를 구성하는 모든 멤버 변수, 멤버 메소드를 합쳐서 멤거라고 부른다.
    }

=====================================================================================================================================================

객체화
    객체를 만드는 작업, 추상적인 개념을 구체화시키는 작업
    클래스명 객체명 = new 클래스명();

    자료형 변수명 = new 생성자();

    변수명.멤버명
    .(마침표): 하위 연산자, 멤버접근 연산자, 닷 연산자

=====================================================================================================================================================

public void myMethod(){

    MyClass         refVar          =       newMyClass();
    자료형(클래스)   참조변수    대입연산자   new생성자();
    ------------------------                -------------
            1번                     3번          2번
}

1. refVar이라는 참조변수는 myMethod()이라는 메소드 영역에서 만들어진 지역변수이므로 JVM이 관리하는
   메모리의 Stack영역에 생성된다.

2. new 연산자가 Heap메모리에 MyClass 객체를 생성하고 참조값을 가져온다.(참조값을 반환)
   이 때 생성자가 실행된다.

3. 대입연산자를 통해 참조값을 왼쪽의 참조변수에 저장한다.

=====================================================================================================================================================

생성자
    클래스 이름뒤에 소괄호가 있는 형태, 메소드와 기능이 비슷하지만 메소드라고 부르지않는다.
    생성자 리턴이라는 기능이 존재하지 않는다.

    - 객체를 생성할때 실행되는 코드가 작성되어 있다.
    - 주로 해당 클래스의 필드(멤버 변수)를 초기화하는 목적으로 사용한다.

기본 생성자
    - public 클래스명(){}
    - 매개변수가 없다.
    - 클래스 선언시 자동으로 선언되며, 사용자가 직접 생성자를 선언하게 되면 자동으로 만들어주지 않는다

=====================================================================================================================================================

this

=====================================================================================================================================================

다형성(Polymorphism)
    객체지향 언어의 중요한 특징 중 하나이다
    참조변수의 다형성, 메소드의 다형성이 있다

메소드의 다형성
    1. 오버로딩(OverLoading)
        매개변