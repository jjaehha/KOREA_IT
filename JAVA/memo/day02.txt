1) 제어문자
2) 출력메소드 종류
3) 형변환
	강제형변환
	자동현변환
4) 함수와 메소드
5) 입력 메소드
6) 연산자

================================================================================================================================================

제어문자(Escape String)
	문자열안에서 사용되며 미리 예약된ㄴ 특수한 기능을 하는 문자
	\(백슬래시 or 역슬래시)를 사용한다

	\n: 줄바꿈
	\t: 일정간격을 띄워준다. (tap)
	\": 문자열 안에 큰 따옴표를 표현
	\': 문자열 안에 작은 따옴표를 표현
	\\: 문자열안에 역슬래시(백슬래시)를 표현

================================================================================================================================================

출력 메소드의 종류
	괄호 안에 있는 값을 콘솔창에 출력함
	
	println()
		전달된 값을 출력하고 줄바꿈이 된다.
	print()
		전달된 값을 출력하고 줄바꿈이 되지 않는다.
	printf()
		형식(서식 format)에 맞는 값을 출력하고 불바꿈이 되지 않는다.

================================================================================================================================================

출력 메소드의 목적
	개발자가 오류를 해결하기 위해 값을 확인할 때 사용한다.

================================================================================================================================================

형식 지정자(서식문자)
	-출력 형식을 지정한다.
	- %로 시작하며 printf()에서 사용한다.
	- 반드시 큰 따옴표 안에서 작성한다.
	-','뒤에 나오는 값이 형식 지정자 위치로 들어가게 된다.
	printf("문자열 %s 입니다" , 값);

자료형(type)		형식지정자(서식문자)

int					%d -> decimal(10진수 정수)
					%o -> octal(8진수 정수)
					%x -> hexadecimal(16진수 정수)

double				%f -> float(실수)

char				%c -> character(문자)

String				% -> String(문자열)


// 실습
=====영수증=====
포도		500원
사과		1500원
바나나		2000원
===============
	
================================================================================================================================================

변수를 사용하는 이유 (값을 왜 변수에 저장해서 사용하는가?)
	1. 반복되는 값을 쉽게 관리하기 위해서(값을 재사용하기 편함)
	2. 값의 의미 부여를 하기 위해서

================================================================================================================================================

형변환
	- 자동형변환
		정수 + 실수 = 실수
		정수 + 정수 = 정수

		1+0.2 = 1.2
		10/3 = 3
		10/3.0 = 3.3333

	- 강제형변환
		(double)11/9
		(char)('A'+1) -> B

================================================================================================================================================

함수 (클래스 밖에서 만든다)
	어떤 기능을 하는 것
	이름 뒤에 ()가 있다.

메소드(클래스 안에서 만든다)
	함수와 같다.
	JAVA에서 모든 함수는 클래스 내부에 만들어지므로 메소드라고 말한다

================================================================================================================================================

입력 클래스
	Scanner sc = new Scanner(System.in)

입력 메소드
	next()
		입력 받은 값을 String 타입으로 돌려준다.
		입력한 값을 띄어쓰기, 엔터로 구분하고 분리한다.
	
	nextLine()
		입력 받은 값을 String 타입으로 돌려준다.
		띄어쓰기, 엔터도 값으로 입력된다.
		한줄 전체를 입력 받는다

	nextInt()
		입력 받은 값을 int 타입으로 돌려준다.

	nextDouble()
		입력 받은 값을 double 타입으로 돌려준다/

	next(), nextInt(), nextDouble()을 사용하면 엔터값이 남아있게 되는데 다음에 nextLine()을 사용하게 되면 남아있던
	엔터값이 들어가서 입력을 받지 않게 된다.
	따라서 입력받기전에 nextLine()을 사용하여 엔터값을 소모 시켜야 한다.
	