Git
    소스코드 버전 관리 시스템

    프로젝트 개발
    v0.1 --- 서비스 중 -- 업데이트?

    v0.2 --- 여러 기능
    --- feature 1 --- 개발완료
        feature 2 --- 개발완료 -- 되돌려야
        feature 3 --- 개발 --- X

    =>
        v0.1 (product)
        v0.2 (dev) ----- 기능 마다 (ver)

        프로젝트 개발의 history

        git - 소스 코드 버전관리를 넘어 협업 시스템

    ex)
        ㅍ0.2 --- feature 1 (성용)
              --- feature 2 (동민)
              --- feature 3 (전용) --- ( 동시 진행 )

==================================================================================================================================================

    conflict (충돌상황)

        저장공간과 각 기능을 합병(merge)할 때
        충돌이 난 부분을 확인하여 충돌상황을 해결(resolve) 후
        merge 할 수 있도록 함
        ==> 병렬적 개발 가능

==================================================================================================================================================

    이슈 트래커

        개발 간에 있었던 이슈(오류 해결, 오류 미해결)을 기록
    
==================================================================================================================================================

    CI/CD를 위한 저장소 역할 

        지속적인 통합, 지속적인 배포

==================================================================================================================================================

    git 다운로드

        https://git-scm.com/downloads

==================================================================================================================================================

    Github

        Git을 웹호스팅 (UI가 있도록) 서비스
        세계 최대 개발자 커뮤니티

        회원가입 -> 프로필 -> 내 개인 저장소 -> new repository

==================================================================================================================================================

    앞으로 해야할 일

        1, 내가 버전 관리하고 싶은 프로젝트(폴더)를 찾습니다.

        2. 해당 폴더에 로컬 저장소(.git)를 생성 (init)
        3. 이 로컬 저장소와 내가 생성한 repository(원격 저장소)의 주소를 연동 (reboot)

        == 최초 1회 ==

        4. 내가 로컬 저장소에 올리고 싶은 파일을 스테이징 (add)
        5. 내 로컬 저장소 환경에 파일을 전송 (commit)
        
        5.5. push에 조건이 있다.
             현재 올리려는 저장소와 최신화 -> 원격저장소에서 --> 내 로컬 환경 (pull)

        6. 원격 저장소로 전송 (push)

        Set-ExecutionPolicy -Scope LocalMachine -ExecutionPolicy RemoteSigned -Force

==================================================================================================================================================

    power shell 에러 해결

        관리자권한 실행
        Set-ExecutionPolicy -Scope LocalMachine -ExecutionPolicy RemoteSigned -Force

==================================================================================================================================================

    git init
    - 로컬 저장소 생성 (.git)
        * 주의 사항

        터미널에서 내가 올리고 싶은 폴더 경로를 맞추고 나서 생성할 것
        cd 폴더경로
        ex)
            cd git2 (상대경로, 하위 폴더)
            cd C:/User/git2 (절댜경로)
            cd .. (상위 폴더)

    git remote
    - 원격 저장소 설정

        1) git remote
            현재 해당 로컬 저장소와 연결된 원격 저장소의 목록
        2) git remote add [원격 저장소명] [원격 저장소주소]

            ex) git remote add origin https:/github.com/abcd/abcd
            원격 저장소와 로컬 저장소를 연결

        3) git remote remove [원격 저장소명] [원격 저장소주소]
            ex) git remote remove origin https:/github.com/abcd/abcd
            연결된 원격 저장소를 삭제
    
    git add .
        모든 파일을 스테이징
        (.gitignore에 올라가있는 파일은 스테이징 하지 않습니다.)
        
        git add 파일명
            내가 올리고 싶은 파일만 스테이징
            ex) git add index.html

    git commit
        로컬 저장소에 내가 올리고싶은 파일을 올리는 것
        commit을 하게되면 일종에 해쉬(암호화 된) 코드를 받게 됨

        향후 이 코드를 사용하여
        cherry pick 하거나 revert 할 수 있다

        --amend
        기존에 있던 git commit 내용과 현재 commit 내용을 합침

        ex)
        git commit -m "head" -m "body" -m "footer"
        git commit -m "feat: login api" -m 'fhrmdls api를 추가하였습니다'

    git push 원격저장소명 브랜치명
        ex) git push origin main
        로컬 저장소의 커밋 내용을 원격 저장소에 전송

    git pull 원격저장소명 브랜치명
        ex) git pull origin main
        원격 저장소에 내용과 현재 내 로컬 환경을 동기화

          ==============================================================================================================================        

    git cherry-pick hash_commit_number

        ex)
        A라는 기능을 위해
        10개의 커밋이 존재

        해당 commit 주어 내가 적용하고 싶은 커밋만 적용하고자 할때
        해당 commit만 선택하여 적용할 수 있는 명령어

    git revert hash_commit_number
        해당 commit으로 되돌리기 기능
        사용하지 않는 것을 추천
        ex) 마지막 commit undo

    git log
        현재 git의 history와 git hash_commit_number 확인 가능

==================================================================================================================================================

    github 계정을 내 컴퓨터 자체에 연결

        git config --global user.name "jjaehha" <-- 깃허브 닉네임
        git config --global user.email "rlawogk6953@naver.com" <-- 로그인 할 때 사용

        git config --list를 통해 확인 (q를 통해 나갈 수 있음)

==================================================================================================================================================

    * Github Flow


    * Trunk Based