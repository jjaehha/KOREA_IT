* 입력 - 연산 - 출력 (설계 및 검증)

    ex) 구글링을 할 때 중요한 것

        예약번호를 조회해서 고객이름을 검색하는

        * 예약번호로 조회해서 고객이름을 검색하는
        * 오브젝트(집단)에서 특정한 값 조회 --> (find, findIndex)

        #1. 고객목록을 가지고 온다
        #2. 고객 목록에서 내가 입력한 특징 예약번호로 데이터를 찾아온다.
        #3. 고객 목록(집단)에서 특정한 값을 조회해야한다. 

제어문

    조건문
        if ["만약에, 아니면', "조건식"]
        switch ["값", "case", "break"]

    반복문
        주어진 "조건식"의 결과가 참(true)dlf 때까지 해당 블럭(구역, { ... })의 로직(기능, 코등)
        를 반복 실행한다.

        (1) for문 -- 가족 (forEach, for..in, for..of)

            ex) for(초기화식; 조건식; 증감식) {
                조건식이 참인 경우 실행할 문장
            }

            for(let i = 0; i < 10; 1++) {
                console.log(i) -- 반복 실행할 문장
            }

            console i
            // 0 ----> 1
            // 1 ----> 2
            ...
            // 9 ----> 10 -- 여기까지만 반복

        (2) while문
            
            while(조건식) {
                조건식이 true일 동안 실행할 문장
            }

            무한루프
                let count = 0;

                while(true) {
                    .. 무한 반복
                    count++;
                    if(count === 3) break;
                }

            do... while문
                while문과 기능은 같지만 조건식이 false라 할 지라도
                "무조건 한 번"은 실행하고 반복

                let count = 3;

                do {
                    console.log(count)
                } while( count < 3)     // 한번은 실행해서 3 이라는 결과가 출력됨

==============================================================================================================================================================

* Function (함수)

    자바스크립트는 합수 지향형 프로그래밍
    최근 들어서는 객체 지향의 장점들이 녹아드는 중

    함수 지향이란 무엇일까?
        프로그래밍 패러다임의 한 종류
        순수 함수는 조합하고 함수를 일급 객체로서 사용하여 프로그래밍 하는 방식

    프로그래밍 패러다임이란?
        개발자에게 프로그래머로서의 관점을 갖게하고 결정하는 역할 => 개발 방법

        명령형
            절차 지향: 순서를 중요 시, 컴퓨터의 처리구조와 비슷, 속도가 빠름(C, Cobol)
            객체 지향: 객체(집단)의 상호 작용을 중요 시, 유지 보수 용이(Java, C++)

        선언형 (어떻게 할 것인가보다는 무엇을 할 것인가가 중요)
            함수 지향: 순수 함수를 조합하고 프로그래밍 하는 방식 (Javascript)

    
    함수 지향 프로그래밍 관련 용어

        불변성: 함수 밖에서 데이터의 변형을 일으켜서는 안된다
        클로저: 부모 함수가 실행 종료되어도 참조할 수 있는 내부 함수는 기억된다
        순수함수: 입력 값에만 의존하고, 부수효과는 연산에 영향을 미치지 않는다
        일급객체함수: 함수를입력 값(파라미터, 매개변수, 인자)으로 사용할 수 있고
                     반환 값(출력)으로 사용할 수 있다
        유지관리가능성: 외부 효과에 의존되지 않으면 해당 부분만 수정하면 되기 때문에
                       유지보수가 쉽디
        모듈화: 함수를 분리하여 재사용 및 관리가 용이하도록 구성해야한다
        부수효과: 함수 밖에서 함수의 연산에 영향을 끼치면 안된다. (외부효과, 사이드이팩트)
        참좉투명성: 동일한 값에는 항상 동일한 반환 값

        p.s 위 언어를 모두 완벽학 이해하고 코드를 작성해야한다면 처음부터는 어렵다.
        따라서 당장은 자바스크립트는 함수를 기반으로 하는 함수 지향형 프로그래밍이다.

==============================================================================================================================================================

함수
    어떠한 기능을 만든다에 의존하고 초점

    ex)
        나는 두개의 숫자를 전달받고
        두 숫자를 합치는 함수를 작성하고 싶다

    선언부
        - 선언부는 함수를 실행하는 것이 아니라
        - 기능만 구성하여 컴퓨터에게 기억시키는 것 => 재사용

        Function 함수명(파라미터1, 파라미터2, ...)
                        -----------------------\
                                실행부에서 전달받은 값
                                파람, 매개변수, 인자
        {
            ... 작성하고 싶은 연산
            파라미터1 + 파라미터2
            반환 값 (생략가능)
        }


    실행부
        함수명(전달 값1, 전달 값2);    // ***** 순서 중요

        ex)
            function sum(num1, num2) {
                console.log(num1 + num2)
            }

            sum(3,5)

        반환값
            sum(3,5)
            +10;

            console.log(sum(3,5) + 9) // undefined

            function sum(num1, num2) {
                return num1 + num2
            }

            console.log(sum(3,5))

            * 반환 값은 해당 합수 실행부에 값을 부여한다는 의미
              만약에  return이 없다면 비즈니스 로직만 실행하고 값은 undefined

              즉 함수의 기능은 정상작동하나 값은 존재하지 않는 상태
              따라서, 이 함수에 값을 주자 return이있음

==============================================================================================================================================================

(1) 기명함수, 익명함수

    기명합수: 이름을 지어준다
    익명함수: 이름이 없는 함수

    function hello() {
        console.log('hell0')
    }

    =============================================================================

    function() {
        console.log("world")
    }
    -- 다른 함수의 매게변수로 전달되어 실행되는 함수 (콜백함수 클로저, 즉시실행함수)
    -- 재사용 가능성이 있는 경우

    =============================================================================

    ex) array.map(function(el,index,arr){})


(2) 재귀함수, 즉시실행함수

    재귀함수
        함수 안에서 같은 함수를 실행 (반복)
        [코딩테스트 최단 경로 관련 알고리즘 문제 단골]

        function f(n) {
            if(n <= 1){
                return 1
            }
            retuern n + f(n-1)
        }

        f(10) // 55
        10 + 9 + 8 + 7 ... + 1 =55

    즉시실행함수
        실행부 없이 선언부만으로 바로 실행
        보통은 익명함수로 주는 경우가 많음

        괄호 두개 열어준다

        (function(){
            ... 로직               -----> ()() ------> (function(){}) ()
        })()


(3) *화살표 함수
    function 키워드 대신 (=>)를 사용하여 보다 간략한 방법으로 함수 선언 가능
    ES6, ES7의 문법

    ex)
        function a (param1, param2){

        }

        function() {

        }

        ============================

        const a = (param1, param2) => {

        }

        //익명함수에 용이
        () => {
            
        }