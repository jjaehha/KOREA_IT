DOM API
    (Document Object Model) 문서 객체 모델
        흔히 HTML에서 사용하는 div, span, input과 같은 요소를 DOM이라고 함

    (Application Programming Interface) API
        응용 프로그램 사이에서 통신에 사용되는 언어와 메시지를 이야기함

    DOM selector
        ex)
            <div id="menu"></div>

        1. document.getElementById() //단일 객체 반환
        2. document.getElementsByClassName()
            - HttpCollection
        3. document.getElementsByTagname()
            - HttpCollection
        4. document.getElementsByName() // 유사 배열 객체 반환
            - NodeList
        
        5. document.querySelector()
        6. document.querySelectorAll()


        * NodeList vs HttpCollection
            HttpCollection: live // 유사 배열객체 + 이터러블
            NodeList: none-lice // 유사 배열겍체 + 이터러블

            ex)
                <div class="red" />
                <div class="red" />
                <div class="red" />

                const $els = document.getElementsByClassName('red')
                
                for(let i = 0; i<$els.length; i++) {
                    $els[i].className = 'blue'
                }

        * 유사배열객체
            let obj {
                0: "1",
                2" "2",
                length: 2
            }

            for(let i=0; i<obj.length; i++){
                console.log(obj[1])
            }

        * for of(o) for(o)
        * forEach(x) map,fillter(x)
        * NodeList는 forEach 사용이 가능, 단 배열 메서드 사용불가

        * HTMLCollection, NodeList를 배열로 사용하고 싶다
            1) Array.from()
            2) const arr = [...els]
            3) HttpCollection.prototype.forEach = Array.prototype.forEach(권장X)

===========================================================================================================================================================

DOMAPI 왜 사용할까?

    사용자의 행위에 따라
    HTML 요소 (div, span)의 properties를 바꾸기 위해 사용합니다

    => html, css 정적인 페이지 => 동적으로 만들기 위해서

===========================================================================================================================================================

properties (속성)
    
    개발자 도구에서 확인 가능, DOM API를 사용하는ㄴ 궁극정인 목표

    value
    innerText
    innerHTML
    style
    classList
    onclick
    onchange
    ...
    event...

===========================================================================================================================================================

addEventListener
    
    자바스크립트에서 가장 권장되는 이벤트 등록 상식 방식 ==> 사용자의 행위
    이 방식을 이용하면 하난의 요소에 여러개의 이벤트 핸들러를 등록할 수 있음

    ex)
        요소(tag) or window.addEventListener("이벤트명", 콜백함수, options)

        function add(){}
        document.getElementById("userName").addEventListener("click", () => {console.log(jaeha)}, true)
        // options(캡처링 유무)의 경우 default가 false이므로 false일 경우는 생략

        자주 사용하는 이벤트명
        
        click - 요소를 클릭했을 때

        mouseover - 요소에 마우스를 올렸을 때
        mouseleave - 요소에서 마우스가 떠났을 때
        mousedown - 요소를 누르고 마우스를 아직 때기 이전 상태
        mouseup - 요소를 누르고 마우스를 땐 상태, 땠을 때 마우스 위치가 요소 위에 있어야함
        mousemove - 마우스가 움직일 때마다 
        mousewheal - 마우스 휠이 이동되었을 때 

        focus - 활성화 되어있을때
        blur - 포커스에서 벗어났을 때
        change - 폼필드의 속성이 변경되었을 땐

        keypress - 키를 누른 순간
        keyup - 키를 누르고 있다가 땐 순간
        keydown - 키를 누르고 때기 이전인 순간

        window, document

        load - 웹 페이지가 로드 되었을 때
        * resize - 웹 페이지의 사이즈가 조정 되었을 때
        scroll - 스크롤바의 움직임이 생겼을 때
        unloads - 웹 페이지가 닫혔을 때
 
        * form field
        <input /> ... type
        <select>
        <button>

        classList

            해당 요소가 가지고 있는 클래스의 목록을 나타내는 DOM properties

            <div class="jay on add flex"/>

            document.getElementsByClassName("jay").classList
            // jay on add flex

            classList.contain("on")
                해당 클래스가 있는지 여부를 판단하여 boolean 형태로 반환

            classList.add("class")
                해당 요소에 인자로 전달된 클래스를 DOM에 추가

            classList.remove("class")
                해당 요소에 인자로 전달된 클래스를 DOM에서 제거

                ex)
                    <div class="tab" />
                    <div class="tab" />
                    <div class="tab" />
                    <div class="tab" />
                    <div class="tab" />

                    const tabs =document.querySelectorAll("tab")
                    tabs.forEach((el) => {
                        el.addEventListener('click', (e) => {
                            const selectTab = e.target;
                            selectTab.classList.add('on')
                        })
                    })

        ** this (이거, 자기 자신)
            자바스크립트의 this는 동적으로 바인딩(결정) 되며
            => 누가 this를 불렀는가에 따라서 값이 바뀐다

            addEventListener의 this는 이벤트 자체를 불러옵니다.
            따라서 이벤트가 일어난 대상을 찾기위해서 e.target을 통해 명확한 요소를 불러올 수 있음

===========================================================================================================================================================

attribute(속성)

    setAttribute("속성명", 속성값) - 설정
    getAttribute("속성명") - 속성 값의 조회
    removeAttribute("속성명") - 삭제

===========================================================================================================================================================

캡처링, 버블링
    
    버블링
        한 요소에 이벤트가 발생되면, 이어서 부모 요소의 핸들러가 동작
        => 하위 요소의 이벤트가 부모 요소의 이벤트로 전파

    캡처링
        버블링과는 반대, 부모 요소를 클릭했을 때 하위 요소로 이벤트가 전파되는 것
        캡처링의 기본 옵션은 false
        addEventListener의 options 인자로 t/f를 변동 가능

            ex)
                el,addEventListener('click', function(){}, true)

===========================================================================================================================================================

이벤트 전파 방지