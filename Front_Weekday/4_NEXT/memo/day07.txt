객체 뒤에 작성하는 ? 연산자

    객체?key
        만약 객체가 undefined거나 null일 경우에는 결과로
        undefined가 나오고,
        객체라면 그 객체 안에있는 key 번째 방에 들어있는 value가
        결과로 나온다

        ex)
            let book = {
                title: '대모험',
                page: 200
                }
            
            book?.title
                book속에는 null이나 undefined가 들어있ㅈ디 않기 때문에
                book.title 속에 있는 값이 '대모험'이 결과로 나온다

            book = null
            book?.title
                book 속에 null이 있기에 결과는 undefined가 나온다

        원래 작성 방식
            
            book !== null && book !== undefined ? book.title: undefined

=======================================================================================================

이벤트 객체
    
    기본적으로 이벤트에 함수를 넘ㅁ겨주면 해당 함수에는 event 객체가 대입이된다.
    하지만 해당 함수에 인다로 event객체가 아닌 특정 값을 남겨주고 싶으면 어떻게 해야할까

    이번튼을 클릭하면
    콘솔창에 안녕이라고 출력

    <button onClick={consol.log}></button>
    --> 버튼이 클리 되었을 때 console.log 함수가 실행되긴 하지만
        인자에는 이벤트객체가 들어가서 실행이 된다

    따라서 인자에 특정한 값을 넣어준 함수를 실행하고 싶다면
    다른 함수로 감싸야 한다

    const tmp = () => {
        consol.log('안녕');
    }

    <button onClick={tmp}></button>

    해당 버튼이 클릭되면 tmp 함수가 실행이 되고,(tmp함수의 인자로 이벤트객체가 들어감)
    결과적으로 consol.log('안녕');이 실행되는 것이기에
    버튼을 클릭할때 마다 '안녕'이 출력된다

익명함수로 감싸서 전달하는 경우
    실질적으로 실행시키고자 하는 함수의 매게변수에 이벤트객체가 아닌
    다른 값을 인자로 전달하고자 할 때

함수 자체로 전달하는 경우
    실행시키고자 하는 함수가 매게변수로 이벤트 객체를 받아오거나
    이벤트 객체를 아예 사용하지 않는 경우

=======================================================================================================

컴포넌트 분리
*핵심 = 재사용성을 높이기 위해서 독립적인 기능을 하는 UI 요소를
        하나의 컴포넌트로 분리를 한다

    헤더 컴포넌트 분리 --> 헤더 태그를새롭게 만들었다

    ex)
        게시판목록페이지
            헤더
            게시판목록바디
            푸터


        게시판상세페이지
            헤더
            게시판상세바디
            푸터

        게시판작성페이지
            헤더
            게시판작성바디
            푸터

    constainer presenter 분리 기법
        constainer: 함수, 데이터처리 등 논리적인 부분을 담당하는 컴포넌트로
        presenter: 실질적인 UI를 담당하는 컴포넌트(html 태그들...)
        이 두 컴포넌트를 분리시키는 기법

        목적: 데이터 처리 로직과 UI 로직을 분리함으로써 가독성을 높이기 위해 +
              컴포넌트 재사용성을 높이기 위해서