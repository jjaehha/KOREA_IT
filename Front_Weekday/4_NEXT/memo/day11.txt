웹통신 과정

    request = {
        method:'GET',
        header:{
            'User-Agent': '요청을 보낸 주체' (요청에 대한 다양한 정보들을 담아서 보낸다)
        },
        body:{
            우리가 서버쪽으로 전달해줄 실질적인 값들
            게시글id:1,
            게시글제목:"안녕",
            게시글내용:"qksrkdnj"
        }
    }

    request(JSON형태로 요청한다): 객체
    요청(게시글 새롭게 한개 작성해줘)

    브라우저                -->             서버(컴퓨터) --> 데이터베이스(게시글 저장성공 / 실패)
                            <--
    응답(성공했어~, 실패했어~)
    response(JSON형태로 응답한다): 객체

    response = {
        status:201,
        header:{
            이 응답은 어떠한 형식인지
        }
        data:{
            우리가 필요로 했던 데이터
        }
    }

node.js 와 서버
    node.js 가 없었을 때는 javascript는 서버로 사용할 수 XX
        -> 자바스크립트 코드를 해석하고 실행하는 도가가 브라우저밖에 없었기 때문에
    
    결과적으로 서버쪽에서는 브라우저를 사용하지 않기때문에 자바스크립트 코드를 해석할 방법이 없었다
    node.js가 만들어지면서 (자바스크립트 실행기) 브라우저 없이도 자바스크립트 코드를 해석, 실행할 수 없게 되었다.

    자바를 통해, 파이썬을 통해 서버를 구현한다고 하더라도
    프론트 쪽에서는 javascript html css 를 사용해야만 했다
    javascript 를 통해 서버를 만들 수 있다면 html, css도 javascript를 통해 만든다면
    한 가지안어만 잘 알고 있어도 모든 개발이 가능하다라는 장점
    (기업입장에서는 비용을 절약할 수 있다)

서버쪽에서 이용을 쉽게 도와주는 라이브러리
    
    express.js
        yarn add express
        npm install express

    next.js
        pages 폴더 안에 api 폴더에서 서버를 구현할 수 있다면
    
    서버 프로젝트를 따로 만들기 vs next 안에다 서버 프로그램 만들기

        서버 프로젝트를 따로 만들면 프론트쪽 작업과 백단 작업이 분리가 되기 때문에
        유지 보수 측면에서는 더 좋고, 추가적으로 미들웨어(여러가지 편리한 함수들)를
        사용할 수 있다는 장점이 있다

        next 안에다 서버프로그램을 만들면 속도 측면에서 더 빠르고,
        보다 이해가 직관적으로 된다

데이터베이스
    관계형데이터베이스 <--> noSQL (mongoDB)
    --> 표형태로 저장하자   --> 객체 형태로 저장하자 {id: 1, title:"제목", content:"내용"}

    RDBMS(Relational DataBase Management System)
        ORACLE, mySQL, ....

    mySQL
        SQL: 데이터베이스 관리 시스템에서 사용하는 명령어(표준화가 되어있다)

    데이터를 영구적으로 저장하는 공간
    데이터 저장 방식?
        표(table) 형태(행row과 열column)로 저장한다
        여러가지 표가 서로 관계를 맺고 있다

        사용자 테이블(표)

            사용자: id, pw, 이름 으로 구성되어있다
                컬럼: 속성
                로우: 인스턴스, 튜플

            규칙
                하나의 테이블에는 반드시 각각의 행을 구분할 수 있는 컬럼(primary key, 기본키)이 이썽야 한다
                서로 관계를 맞고 있는 테이블은 데이터 무결성을 해칠 수 없다

                서로 관계를 맺고 있는 테이블(컬럼이 연결되어있다)
                회원테이블의 id 컬림이 게시글테이블의 writer 컬럼에 사용되고 있다
                게시글테이블의 writer 컬럼은 회원테이블의 id 컬럼을 참조하고 있다

                회원테이블은 제공(부모테이블), 게시글테이블은 제공받고(참조하고있다)(자식테이블)
                다른테이블에 있는 컬럼을 참조하고 있는 컬럼(writer)은 외래키(foreign key)
                자식테이블에(writer) 새롭게 값을 추가하려면
                부모테이블에(id컬럼) 존재하지 않는 값만 추가할 수 있다 (삭제도 동일)

                회원 테이블
                    id      pw      이름
                    abc123  1234    홍길동
                    bbb123  5555    김철수

                게시글 테이블
                    id      title       content     writer
                    1       안녕        반가워      김철수
                    2       2번개시글   작성        ddd4123

                테이블 나누는 방법(정규화 과정)

                    1차 정규화 (하나의 컬럼, 하나의 행 에는 한개의 값만 저장해야한다)

                        테이블
                            id      pw      name        title       content
                            abc123  1234    kim         안녕, 제목  반가워, 내용
                            bbc123  6555    park        null        null

                            code    id      pw      name        title       content
                            1       abc123  1234    kim         안녕, 제목  반가워, 내용
                            2       bbc123  6555    park        null        null
                            3       abc123  1234    kim         제목        내용

                    2차 정규화(관련 있는 것들 끼리 묶자)
                    
                        회원테이블
                            id      pw      name  
                            abc123  1234    kim
                            bbc123  6555    park

                        게시글 테이블
                            id      title       content     writer
                            1       안녕        반가워      abc123
                            2       제목        내용        abc123

                    3차 정규화(한개의 컬럼을 보고 알수있는 값들은 분리한다)

                        회원정보
                            id      pw      zupcode     도      시      동
                            abc123  1234    01234       경기도  수원시  천천동
                            ddd412  5555    55423       경기도  수원시  율천동
                            ccc111  1234    01234       경기도  수원시  천천동

                        주소테이블
                            zipcode     도      시      동
                            01234       경기도  수원시  천천동
                            34782       경기도  수원시  천천동
                            51564       경기도  화성시  천천동
                            12121       경기도  안산시  천천동
                            54354       경기도  양주시  천천동
                            85851       경기도  부천시  천천동

                    반정규화
                        다시 합치기 --> 성능을 향상(속도)를 목적으로 감수하고 다시 되돌리는 행위
