nodemodules 폴더를 설치하는 방법
    npm install
    yarn install

my-blog 프로젝트 구조를 단순화 시켜서 학습
frontend2-main에는 그 구조를 적용시킨 실습용 폴더(github 공유)
board 폴더에서 수업시간 내용 적용시켜복(오류, 감이안잡히거나..)
    --> frontend2-main 프로젝트와 코드를 비교해보면서 학습
    (모르는 내용 있으면 카톡이나 메일로 보강)

=============================================================================================================================================================

 css in js
    css를 파일로 분리시키지 않고, js 파일로 만드는 기법

    조건부 렌더링
        CSS 안쪽에 CSS를 적용하는 문법

        ex)
            const MyDiv = style.dov`
                background-color: red

                &:firtst-child{
                    color:red;
                }
            `;

    리엑트에서 inline-style을 입히는 방법

        jsx 코드의 style이라는 속성(props)에는
        반드시 css 스타일 정보가 들어있는 자바스크립트 객체를 전달해야한다
        

        // 객체: key와 value 한쌍이 모여있는 집합
        let book = {
            title:"대모험",
            page: 50
        }

        (jsx: html태그처럼 보이는 자바스크립트로 만든 태그)

        적용시키고 싶은 스타일
        글자색 빨강, 테두리는 1px로 실선, 검정색
        let a = {color:'red', border:'1px solid black'}
        이때, key 값들은 css의 속성 명칭하고 일치하게 만들어 놓았지만
        text-align과 같이 - 로 이루어져있는 속성명칭은 카멜표기법으로 만들어 놓았다(React개발자가) 따라서
            textAlign : 'center' 와 같이 사용해야 한다..

        .js 파일 안의
            <h1 style = { a }></h1>
        은 html태그가 아닌 jsx 이다

        .html 파일 안의
            <h1 style = "color:red; border:1px solid black;"></h1>
        은 html 태그

=============================================================================================================================================================

조건부랜더링
    jsx의 props
    jsx의 props는 우리가 마음대로 만들 수 있다(이미 만들어져있는것도 있음)
    예를 들어
    js 에서의
    <h1></h1>
    태그는 이미 html에 존재하는 속성들하고 비슷한 이름으로 props들이 존재한다
    <h1 id='값' class='값' onClick={자바스크립트코드} myProps=값></h1>
    myProps는 개발자가 직접 만든 props 이다

    해당 jsx 코드의 props에 대입해준 값들은 해당 jsx 컴포넌트로 전달이 된다!

props
    props는 해당 컴포넌트에 전달할 값들을 의미하며,
    해당 컴포넌트 함수의 매개변수는 props로 전달한 값들이
    key와 value로 대입된다

    ex)
        <MyComponent a="안녕" b={true} c={10} d={{title: '대모험', page:'20'}}></MyComponent>
        에서 작성한 a, b, c, d porps 들은 객체로 묶어서

        const MyComponent = (props) => {

        }
        
        컴포넌트 함수의 props에 전달이 된다
        props에 들어있는 값:
            props = {
                a:'안녕',
                b: true,
                c: 10,
                d: {
                    title: '대모험',
                    page: 200
                }
            }

    styled 안에서 props를 전달 받기 위해서는
    ${} 안쪽에서 함수를 써야하고, 그 함수의 매개변수가 props들을 전달받는다

    ex)
        <MyDiv a="안녕" b={true}></MyDiv>

        const MyDiv = styled.div`
            ...

            ${props=>{
                // props 에는 MyDiv를 그리며 넘겨준 a, b가 들어있다
                // props = {a: "안녕", b: true}
            }}

            ...

        `;

=============================================================================================================================================================

조건부 렌더링 심화

A 상황에서는 a css를 B 상황에서는 b css를 적용시키고 싶은 경우
A 상황에선는 a css를 B 상황에서는 css를 안적용시키고 싶은 경우'
A 상황이 아니라면 a css를 적용시키고 싶은 경우

삼항연산자
    조건식 ? true일때 값: false일때 값
    조건을 만족할때는 a, 아닐때는 b css를 적용하고 싶다면
    조건 / 'a' : 'b'

논리연산자
    값1 && 값2
        값1 true라면 결과는 ? 값 2
        조건을 만족할때만 적용시키고 싶다면
        조건 && 'css값'

    값1 || 값2
        값1 true라면 결과는 ? 값1
        조건을 만족하지 않을때만 적용시키고 싶다면
        조건 || 'css값'