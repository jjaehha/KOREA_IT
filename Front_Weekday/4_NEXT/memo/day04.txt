전역 css 스타일링
    body태그라든지 아니면 * 모든 태그 등에 적용시킬 공통 css를 의미

    css in js 방식(자바스크립트 css를 정의하는 방법)
        장점 해당 스타일이 적용된 태그(컴포넌트)를 직접 생성

            ex)
                const MyDiv = styled.div`
                    css스타일링
                `;
            해당 css가 적용된 <MyDiv> 라는 컴포넌튿가 새롭게 만들어지고, 이를 가져다 사용

        * React 그중에서도 Next 프레임워크의 동작 원리
            각 페이지의 index.js 에서 export default 되고 있는 컴포넌트가
            _app.js에서 사용이 되며
            최정적으론는 _app.js 하나가 화면에 그려지게된다(렌더링 된다)
            _app.js에 의해서 html태그, head태그, body, div id='__next' 태그가 그려지고
            그 안에 자식으로 index.js에서 export default되는 컴포넌트가 들어있다

    emotion 라이브러리에서 전역 스타일링을 위해 제공하는 함수와 컴포넌트(탣그)
        css 함수 Global 컴포넌트

    1. css함수를 통해 적용시킬 전역 스타일 설정
        
        const MyGlobalStyle = css `
            전역스타일
        `;

        이때 css 함수를 통해 만든 전역스타일은
        emotion에서 제공해주는 Global 컴포넌트의 styles라는 props(속성)에 전달해줘야하고
        그 Global 이라는 컴포넌트 전역스타일 입히고 싶은 컴포넌트 안에 포함시켜주면 된다
        이때 어차피 모든 index.js 컴포넌트들은 마지막에 app.js에서 그려지기 때문에
        app.js에다가 전역슽타일 컴포넌트를 삽입한다

        app.js
        return(
            <>
                <Global styles={MyGlobalStyle}/>
                ...
            </>
        )

=============================================================================================================================================================

이미지 경로 설정방법
    이미지는 보통 src 폴더가 아닌 public 폴더에 담아준다
    보통 이미지나 영상 같은 경우에는 용량이 큰 경우가 많고
    이러한 이미지가 src 폴더내에 있으면 렌더링 될 때 성능상 무거워 지는 경우가
    많다

    public 폴더 안쪽에 담아주면 성능을 향상 시킬 수 있다

    public 폴더 경로는 상대경로를 사용해도 인지를 못한다

    next/image 안에 있는 <image> 컴포넌트 사용.
    src 경로에는 기본이 public으로 되어있기 때문에
    /이미지.jpg 식으로 사용하면 된다

=============================================================================================================================================================

state 변수
    변수 속에 있는 값이 변경된다면 랜더링되어야 하는 변수
    state 변수로 만들 때 사용하는 훅함수: useState 함수

        let [스테이트변수이름, 렌더링시킬함수이름] = useState(초기값);

        useState 함수 사용 결과는 두칸짜리 배열입니다
        0번째 방에는 인자로 넘겨받는 초기값이 대입되어있는 state변수가 들어있고,
        1번째 방에는 해당 state변수가 변했을 때 re-Rendering을 시킬 수 있는 실행함수가
        들어있습니다

        0번쨰 방에 있는 것은 스테이트변수이름에 대입
        1번째 방에 있는 것은 리렌더링시킬함수이름에 대입

    리엑트 동작의 기본 개념
    최초 app.js가 그려지고, 페이지를 이동하는 것처럼 보이지만
    다른 주소를 입력하면 이미 그려진 html 에서 바뀌어야하는 부분만 다시 랜더링을 한다

    SPA를 가능하게 한다(리엑트의 장점)
    (Single Page Application), 웹사이트를 오로지 하난의 파일(페이지)로만 만들겠다

    SPA 방식의 장점:
        사용자 입장에서 빠른 로딩이 가능하다

    SPA <--> MPA
        Multi Page Application
            페이지 여러개를 만드는 방법

    CSR 과 SSR
        Client Side Rendering
            프론트 쪽에서 html 코드를 그려서 보여주는 방식(리엑트)
            클라잉언트가 접소하여 요청 --> 서버에서 요청한 데이터를 응답 -->
            프론트에서 응답된 데이터를 밭탕으로 html 문서를 렌더링 --> 클라이언트가 보개된다

            최초 데이터를 받아온 상황에서는 html코드의 변경이 있을떄 SSR 방식보다
            빠르게 응답할 수 있다
            만일 최초 받아와야하는 데이터가 엄창나게 시간이 오래 걸린다
            기다리는 시간이 오래 걸려서 사용사 경험이 나빠질 수 있다
            또한 인터넷 상에선는 html 문서 안에 아무것도 그려지지 않은 상태이기 때문에
            검색 최적화(SEO)에 불리하다
        
        Server Side Rendering
            서버쪽에서 html코드를 그려서 보여주는 방식(jsp, ...)
            클라이언트가 접속하여 요청 --> 서버에서 요청한 데이터를 바탕으로 html 문서 렌더링
            --> 프론트에서는 완성된 html 문서를 보여주기 --> 사용자가 보게된다

            검색최적화 유리
            잦은 변경 있을 때는 속도 및 성능이 CSR 방식에 비해 불리하다

    Next.js (리엑트를 활용한 작업 툴 framework)
        향상된 React ??
        최초에 app.js를 그릴때는 서버쪽에서 그림을 그리고, SSR
        완성된 html을 화면상에 뿌려준다 CSR 방식의 혼합

    next.js를 실행하면
        app.js 페이지 한개만 렌더링이된다
        변화되는 부분이 있다면 그 부분(component) 가 삭제되고, 다시 그려진다(re - Rendering)
        컴포넌트를 다시 그려줘! 라고 명령을 실행해야 하는데
        이를 위해서는 React 에서 만들어 놓은 useState() 라는 훅합수를 사용해야 한다