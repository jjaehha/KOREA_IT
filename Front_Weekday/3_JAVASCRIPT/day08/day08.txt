함수
    함수는 객체이고, 그렇기 때문에 변수에 대입될 수 있다

    함수 정의
        function 함수이름(매개변수, 매개변수,...) {
            코드;
            코드;
            ...
            return;
        }
    
    익명함수
        이름이 존재하지 않는 함수(일회성으로만 사용)

        ex)
            function (){
                코드;
                코드;
            }
        
        결국 익명함수는 다시 사용할 필요가 없을때. 일회성으로 사용할 떄 만든다

            let tmp = function (){

            }

            tmp();

        익명한수를 정의하고 변수에 대입해서 사용하는 방식을 지향
            (var 대신에 let 혹은 const를 사용하는 이유와 동일)
            (중복선언 문제 때문에)

            ex)
                function add(){
                    
                }

                function add(){

                }

                add(); // 가장마지막에 정의 된 함수 실행

                let add = function(){

                }

                let add = function(){

                } // 오류 발생

                add();

        익명함수를 사용하는 이유
            - 함수를 일회성으로만 사용하여, 굳이 이름을 지어줄 필요가 없을때
            - 전통적인 선언방식에서 벗어나서 중복선언 문제를 해결하기 위해
        
    익명함수(화살표 표현식)

        ex)
            (a, b) => {
                return a + b
            }

            (a , b) => a +b

            매개변수가 한 개인 경우
            function(a){
                return a*a;
            }

            (a)=>{
                return a*a;
            }

            a=>{
                return a*a;
            }

            a=> a*a

    생성자 함수 만들기
        생성자함수를 만들면 일정한 property들을 갖고있는 객체들을 생성할 수 있다

        생성자 함수는 반드시 대문자로 시작해야하며 this는 생성자함수를 사용할때 만들어지는 객체 자신을 의미한다
        따라서 this.변수 로 사용하면 만들어지는 객체 속에 해당 프로퍼티를 만들 수 있다

        생성자 앞에는 new를 써서 만들어진 객체를 메모리상에 등록하고 사용한다

DOM
    HTML(XML, ...) 문서의 모든 태그들은 객체로 관리된다
    자바스크립트로 DOM객체를 받아오면 자유롭게 내용물(id, class, css, href, 텍스트내용, 태그, ...)
    등을 자유롭게 조회(겁색) 수정 삭제 추가가 가능하다

    document.write()
    document.....
        document 는 최상위 객체를 의미한다(html태그)
        document 객체 안에 
            getElementById
                태그의 id 값으로 태그객체를 받아온다
            getElementByClassName
                태그의 class 값으로 태그객체를 받아온다
            getElementByTagName
                태그의 태그이름으로 태그객체를 받아온다
            ...
            등의 함수를 활용하여 특정 태그 객체를 받아올 수 있다
            
            css 선택자를 기반으로 받아온다
            querySelector
                한개만 결과로 받아온다
            querySelectorAll
                모두를 결과로 받아온다