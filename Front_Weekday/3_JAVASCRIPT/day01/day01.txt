Javascript
    html: 뼈대를 만드는 작업
    css: 뼈대에다 디자인을 입히는 작업
    javascript: 웹문서를 동적으로 만들어주는 작업

    데이터(값, 객체)를 다루는 방법

    자바스크립트는 객체를 주로 사용하는 객체지향 언어
    자바스크립트에서 모든 데이터(값)는 객체로 다룬다

Javascript에서 값(객체)의 구분
    자료형 (type, 값의종류, 객체의 종류)
        Number 타입
            ex)
                10, 3.12, -5, 3.1 ...
        String 타입
            ' ' or " " or ` ` 사용
            ex)
                안녕하세요, 반가워요, apple, 10 ...
        Boolean 타입
            ex)
                true, false
        underfined 타입
            값이 없음을 나타내는 값(의도지 않게 값이 안들어있음)
            ex)
                underfined
        null 타입
            값이 없음을 나타내는 값(의도적으로 값을 안넣어줌)
            ex)
                null
        Symbol 타입(pass)
            Symbol 차입의 객체, 각각 구별이 가능한 고유 객체
        Object 타입
            모든 객체의 부모 객체, 모든 객체는 Object 타입이다

            원시 타입
                불변성(imutable)을 갖고 있는 타입
                깊은 복사가 발생한다
                Number, String, Boolean, underfined, null, Symbol

            참조 타입
                가변성(mutable)을 갖고 있는 타입
                얕은 복사가 발생한다
                Object 탑입(원시타입을 제외한)
                    ex) Array, Date

            원시타입과 참조타입의 차의
                값(객체)을 저장할때 차이가 있다
                원시타입은 객체 그자체로 저장이 된다면 참조타입은 실질적으로 저장된 위치를
                저장하는 방식으로 저장이 된다

==================================================================================================================================================================================
java c python --> 실행을 하려면 각각의 언어를 해석하고 실행시킬 프로그램이 필요

javascript 명령어를 분석하고 해석하여 실행되는 도구
    web browser 가 해준다
    따라서 과거에는 javascript로 서버쪽의 데이터를 가져오기가 어려웠다
    때문에 서버쪽에서는 java나 python으로 원하는 값을 가져오고
    javascript는 서버가 가져원 값을 적재적소에 보여주는 역할,
    웹브라우저에서 사용자가 요청한 데이터를 서버에 요청하는 역할에 그쳤다

    chrome V8 엔진이 오픈소스로 무료 공개

    C++을 통해

    node.js(독립적인 자바스크립트 실행기)를 개발
    --> 서버쪽 데이터 다루기가 가능

    node.js(독립적인 자바스크립트 실행기) 를 개발
    --> 서버쪽 데이터 다루기가 가능

==================================================================================================================================================================================

함수
    이름 뒤에 소괄호가 있으면 해당 함수를 사요(실행, 호출)하겠다
        ex)
            console,log(); --> 함수를 실행, 호출 하는 행위

    1. 인자값,객체의 (타입)
    2. 함수 실행(호출)시 동작
    3. 함수 사용 결과 값(객체)의 타입

인자값
    함수의 소괄호 안쪽에 쓰여있는 값
    ex)
        console.log('안녕하세요');
        --> log 함수의 인자로 넘어가는 값 => 안녕하세요
        --> 인자의 타입은? String

console.log 함수
    1. 인자값의 타입은 ??? ---> any: 아무타입이나 상관 없음
    2. 함수의 동작?? ---> 인자로 전달받은 값을 console 창에 출력해준다
    3. 함수 사용 결과 값의 타입 ?? ---> underfined

    출력함수

연산자
    1. 피연산자의 갯수와 타입
    2. 연산의 동작
    3. 연산결과 값의 타입

피연산자
    연산을 당하는 친구(함수에서는 인자로 부른다)

    add 함수가 있다, add 함수는
        1. 두개의 숫자를 인자로 받아오고
        2. 받아온 인자값을 더하는 동작을 수행한 후
        3. 두 숫자가 더해진 number 타입의 값이 합수 사용 결과이다
    
    add(10,35)
        => 10 + 35

typeof 연산자
    1. 피연산자의 갯수와 타입 --> 갯수는 1개, 타입은 any
    2. 연산의 동작 --> 피연산자로 받아온 값(객체)의 타입을 구분한다
    3. 연산결과의 값의 타입 --> 구분한 타입을 문자열로 표현한 String타입 값

    typeof 10 --> 가독성이 떨어지니까 피연산자를 소괄호로 감싸는 경우가 있다
    typeof (10) ()가 함수 이름 뒤에 사용이 되면 함수를 실행하겠다는 의미이지만
                일반적인 값들 사이에서 쓰이면 최우선 연산자 소괄호로 사용된다

==================================================================================================================================================================================

변수
    값(객체)을 저장하는 저장공간

변수 선언
    var, let, const, 키워드X

    var 변수이름;
    let 변수이름;
    const 변수이름;

var 선언방식
    var age;

let 선언방식
    let age
    get = 10;

const 선언방식
    const age;

변수에다 값 대입하기
    대입연산자 = 을 사용한다

= 연산자
    1. 피연산자 갯수와 타입 --> 2개, 왼쪽에는 변수, 오른쪽에는 any
    2. 연산의 동작
    3. 연산결과 값의 타입

변수의 해석방법
    변수는
        1. 선언시,
        2. 대입연산자 왼쪽에 쓰일때
    저장공간으로 해석한다
        그외의 경우
    에는 변수속에 자장되어있는 값으로 치환해서 해석