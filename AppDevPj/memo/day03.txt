Android ==> Java(이클립스) ==> final
            Kotlin(인텔리 J) ==> 기본 문법 (when), var, val, ?, ?. !!
            (OPP)               클래스, 상속, 추상, 인터페이스

=============================================================================================================================================================

Java(JVM) ==>  100%호환 ==> 자바로 구현된 프로그램이라면 거의 99% 호환가능

안드로이드 3.0
모바일 ==> 코틀린으로 바뀌는중

    *.java      *.kt
        |         |
   자바컴파일   코틀린
        \        /
          *.class
            |
          *,jar
            |
           JVM

=============================================================================================================================================================

코틀린은 람다 함수 (익명 함수)
    특징 ==> 중괄호({})로 묶임
         ==> 함수의 매개변수가(타입은 생략)가 존재하면, -> 전에 선언
         ==> 함수의 실행부분은 -> 이후에 선언

        ex)
            private int add(int x, int ,y) {
                return x + y;
            }

            //람다함수 변형
            val add(Int, Int) -> Int = {x, y -> x + y}

            // 변수의 이름이 없다(익명성)

        ex)
            public class Test {
                private int eng;
                private int kor;

                public Test(int english, int korean) {
                    eng = english
                    kor = korean
                }
            }

            // 람다함수 변형

            class Test(val eng: Int, val kor : Int)

=============================================================================================================================================================

1. 변수
    코틀린은 두 가지의 변수종류가 있다.
    초기화 후에 가변 변수 와 불변(상수, final) 변수로 나눈어 진다

        가변 변수
            var ==> 읽기/ 쓰기 가 가능한 일반변수
        
        불변변수
            val ==> 읽기만 가능한 변수(Java에서 final기능)

    코틀린에서 변수 선언 방법
    ==> var / val 변수_이름: 변수_타입 = 초기화
        var / val name: String = "name"(자바로 변경 ==> String name = "name";)
                    /       \
                 참조변수   class
        
    Null
        기본적으로 예외 처리 이자 자주 접하는 에러이다
        NPE(정적 분석)

            Non-null 타입
                값으로 null을 갖지 못하면

            Nullable 타입
                값으로 null을 가질 수 있으면

            주의) !! ==> null이 아니다

            ex)
                var name : String = null (1번 선언) // error 발생 ======> String name = null; // 변수에 null값 할당
                                                                Java
                
                var 변수_이름: 변수 타입? = 초기화
                =>
                var name: String? = null (2번 선언)

            ex)
                var firstName: String? = null                   var firstName: String? = null
                var lastName: String = "Lee"    ===========>    var lastName: String = "Lee"
                firstName = lastName                            lastName = firstName

        코틀린은 안전 호출 연산자 사용 방법
            변수.필드(속성).메서드 ==> name?.length

        코틀린 ==> fun main(args: Array<String>)

        자바 ==> void main(String[] args)

2. 함수 (함수 선언시 fun 키워드 사용)
    멤버 함수
        클래스안에 선언된 함수

    확장 함수
        클래스 외부에 선언된 함수

=============================================================================================================================================================
1. 스탑워치
    xml ==> UI ===> 디자인
    kt ==> 리소스 파일(코틀린 파일)