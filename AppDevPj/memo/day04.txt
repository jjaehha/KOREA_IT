클래스 ==> 첫 문자를 대문자로 선언(추상)
    클래스 멤버
        1. 메서드
        2. 필드

생성자 ==> 클래스 이름과 같고 생성자 이름 뒤에 ()를 붙인다

    메서드 혹은 함수와 같은의미
    생성자가 하는 일 ==> 초기화(객체)

생성자 == 메서드

* 매서드를 호출 하기 위해서는 객체가 필요하다.

getDate() 호출하기 위해서 Date 객체(instance)를 만들어
Date().getDate()와 같이 사용

==========================================================================================================================================================

확장 함수
    자바에서 확장 이라는 의미는 extends(상속)
    코틀린은 상속등의 디자인 패턴을 사용하지 않고 새로운 기능이 있는 클래스로 확장할 수 있다.

    선언을 하려고 하면 클래스 내부가 아닌 외부에서 선언해야 한다.

        일반 함수 선언
            fun 함수_이름(매개변수): 리턴 타임 {
                return 값
            }
        
        확장 함수 선언
            fun 확장하려는 대상.함수이름(매개변수): 리턴 타입{
                return값
            }

            ex)
                fun String.getLength(a : String) : String {
                    ....
                }

==========================================================================================================================================================

fun main(args: Array<String>) {
    val a = "Apple"
    val b = "Banana"
    print(a.getLonggerLength(b))
}

fun String.getLonggerLength(x: String): String {
    return if(this.length > x.length){
        this
    } else {
        x
    }
}

==========================================================================================================================================================

클래스

    자바에서는 class 클래스_이름{

    }

    코틀린에서는 class 클래스_이름(매개변수) {
                      // 생성자
    }


    자바에서는 property(속성) ==> 필드와 접근자를 통틀어서 이야기 하는용어.
    (멤버 필드(private), 멤버 메서드(public)선언)

    자바에서 선언하는방법
    class Person {
        int id; // 멤버 필드(인스턴스 변수)
        String name; // 멤버 필드(인스턴스 변수)
        static int age; // 멤버필드(static변수, 클래스 변수)
    }

    코틀린에서 멤버 변수 선언
    class Person {
        var id : int = 0
        var name : String = "Lee"
    }

    
    자바에서는 객체 생성시
    Test te = new Test();

    val te = Test // new 키워드를 사용하지 않는다

    companion object ==> static 변수를 사용해야 할 경우 코틀린에서는
                         비슷한 기능을 가지고 있는 companion object
                         를 사용한다.

    생성자 ==> 코틀린에서는 기본 생성자 와 보조 생성자를 지원
                           생성자()

==========================================================================================================================================================

초기화 ==> 자바에는 없고 코틀린에만 존재하는 키워드
            * lateinit
                프로퍼티를 나중에 초기화 할 수 있도록 해준다.
                일반적으로 프로퍼티는 선언과 동시에 초기화 해주어야 한다.
                특히, Non-null 타입이라면 null 아닌 값으로 초기화 해주어야 한다.

            let
                Nullable 타입을 다루는데 용이하다

            * lazy
                by lazy() 형태의 위임 프로퍼티로 사용한다.
                객체를 초기화 하지 않고 있다가 실재로 값이 필요할 때 초기화 한다.

    ** lateinit
        사용하기 위한 조건
            - var 타입
            - Nun-null 타입
            - 변수 초기화 하지 않고 사용할 수 없다.
            - getter / setter 정의 불가

클래스의 상속
    클래스의 재사용

    코틀린에서는 부모 클래스를 선언하지 않은 클래스는 dsfault super로 Any라는
    부모 클래스를 갖는다.

    ex)
        class Computer // 암시적으로 Any를 상속 받음

        자바의 java.lang.Object와 거의 같은 개념이라고 생각을 할 수 있다
        단, Any는 Object와 달리 equals(), hashCode(), toString()외에는 다른 멤버를
        가지고 있지 않다

        코틀린에서 ==> 상속을 위해서는 부모 클래스에 open키워드를 명시적으로 선언
        자식 클래스는 클랫 선언시 상속 받으려는 부모 클래스를 ":"뒤에 선언

        ex)
            open class Person(var args: Int) // 부모 클래스라고 명시적으로 서넝ㄴ

            class Student(subAge : Int) : Person(subAge)

    자바 상속 불가능 ===> final 키워드
    코틀린 상속 가능 ===> opne 키워드

    ex)
        abstract class Student { } // 추상 클래스 선언

        open class Person {
            open fun needToSleep() { }
        }

        abstract class Student : Person() {
            override anstract fun needToSleep()
            abstract fun Kotlin()
            fun java()
        }

        => 부모 클래스의 추상 메서드가 아닌 것을 상속 받은 자식 클래스가
           재정의 하면서 그 메서드를 추상 메서드로 선언 할 수 있다.